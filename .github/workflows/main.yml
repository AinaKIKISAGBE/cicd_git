name: CI/CD Pipeline

env:
  deploy: false
  #deploy2: false
  
on: # on : permet de Spécifier les événements qui déclenchent ce workflow
  push:
    branches:
      - master  # Déclenche le pipeline sur des pushes dans la branche main
  pull_request:
    branches:
      - master # Déclenche le pipeline sur des pushes dans la branche main


# Le workflow a deux jobs principaux : build et deploy
jobs: 
  # ci: Ce job exécute les étapes de construction de l'image Docker et de tests.
  build: 
    runs-on: ubuntu-latest # Le job s'exécute sur une machine virtuelle avec Ubuntu, qui est l'environnement d'exécution des actions.

    steps:
      # Checkout the repository
      # Cette étape utilise l'action actions/checkout pour cloner le code source du dépôt dans l'environnement de l'action.
      - name: Checkout repository
        uses: actions/checkout@v2

      # Set up Docker Buildx
      # Docker Buildx est un outil permettant de construire des images Docker multiplateformes. Cette action prépare l’environnement Docker pour pouvoir construire des images.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Log in to GitHub Container Registry (ghcr.io)
      # Cette étape connecte l'environnement GitHub Actions au GitHub Container Registry (GHCR) en utilisant le GITHUB_TOKEN. Cela permet de pousser l'image Docker sur le registre.
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GIT_TOKEN }}

      # Build the Docker image
      # Cette commande construit l'image Docker à partir du Dockerfile dans le dépôt, et la tague avec latest.
      - name: Build Docker image
        run: |
          #docker build -t ghcr.io/${{ github.repository }}/flask_api:latest .
          docker build -t ghcr.io/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')/flask_api:latest .

      # creer un dosier tests 
      - name: Prepare tests directory and copy files
        run: |
          # mkdir -p /opt/webapp/tests
          # cp /opt/webapp/test_app.py /opt/webapp/tests/
          # ls -a /opt/webapp/
          # mkdir -p tests
          # cp test_app.py tests/test_app.py
        
      # copier le fichier test.py vers le dossier test 
      # - name: copy file
        # uses: canastro/copy-file-action@master
        # with:
          #source: "/opt/webapp/test_app.py"
          #target: "/opt/webapp/tests/test_app.py"
          # source: "test_app.py"
          # target: "/tests/test_app.py"
      
      # Run tests (if there are any test scripts in the repository)
      # Cette étape exécute les tests de l'application dans un conteneur Docker, en utilisant unittest. Les tests sont automatiquement découverts dans le dossier /opt/webapp/tests/
      - name: Run tests
        run: |
          # Exemple de test - remplacer par des tests spécifiques à votre application
          # docker run --rm ghcr.io/${{ github.repository }}/flask_api:latest python -m unittest discover /opt/webapp/tests/

          # docker run --rm ghcr.io/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')/flask_api:latest python -m unittest discover /opt/webapp/tests/
          #docker run --rm ghcr.io/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')/flask_api:latest
          
          # creer et copier un le fichier taes_app.py à l'intérieur du containeur   
          
          #docker exec ghcr.io/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')/flask_api:latest ls -la /opt/webapp/ 
          

          
          

      
      # Push the Docker image to GitHub Container Registry
      # Si les tests réussissent, cette commande pousse l'image Docker sur GitHub Container Registry avec le tag latest.
      - name: Push Docker image to GitHub Container Registry
        run: |
          #docker push ghcr.io/${{ github.repository }}/flask_api:latest
          # echo ${{ secrets.GIT_TOKEN }} | docker login ghcr.io -u AinaKIKISAGBE --password-stdin
          docker push ghcr.io/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')/flask_api:latest
          
  
  # cd: Ce job déploie l'application sur le serveur cible, en supposant que les tests et la construction de l'image se sont bien déroulés.
  deploy:
    runs-on: ubuntu-latest
    needs: build # Le job deploy s'exécute uniquement si le job build est terminé avec succès.
    if: github.ref == 'refs/heads/master' # Ce job ne s'exécute que si la branche en cours est master

    steps:
      # Cloner le dépôt
      - name: Checkout repository
        uses: actions/checkout@v2
      
      # Connexion au Serveur Distant (SSH)
      # Utilise appleboy/ssh-action pour se connecter via SSH au serveur cible
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }} # Adresse IP du serveur
          username: ${{ secrets.SERVER_USER }} # Nom d'utilisateur SSH
          key: ${{ secrets.SERVER_SSH_KEY }} # Clé SSH pour l’authentification
          
          # Commandes exécutées sur le serveur distant
          script: |
            # Pull the latest image
            # importer la dernière version de l'image Docker du registre
            # docker pull ghcr.io/${{ github.repository }}/flask_api:latest
            docker pull ghcr.io/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')/flask_api:latest
            
            
            
            # Arrête et supprime le conteneur existant
            docker-compose -f /path/to/docker-compose.yml down
            
            # Relance le conteneur avec la nouvelle image
            #> docker-compose -f /path/to/docker-compose.yml up -d

  

  deploy4:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Heroku registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com

      - name: Build and push Docker image to Heroku
        run: |
          docker build -t registry.heroku.com/ttta/web .
          docker push registry.heroku.com/ttta/web

      - name: Release the image on Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          heroku container:release web --app ttta

          
